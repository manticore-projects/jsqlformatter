import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import com.nwalsh.gradle.saxon.SaxonXsltTask

buildscript {
    dependencies {
        classpath group: 'net.sf.saxon', name: 'Saxon-HE', version: '12.5'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'

    id 'pmd'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version "latest.release"
    id "com.github.spotbugs" version "latest.release"
    id "com.diffplug.spotless" version "latest.release"
    id "org.owasp.dependencycheck" version "latest.release"
    id "org.sonatype.gradle.plugins.scan" version "latest.release"

    // download the RR tools which have no Maven Repository
    id "de.undercouch.download" version "latest.release"
    id 'org.hidetake.ssh' version "latest.release"
    id "com.github.hierynomus.license" version "latest.release"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "latest.release"
    id "com.nwalsh.gradle.saxon.saxon-gradle" version "latest.release"
}

repositories {
    mavenLocal()
    mavenCentral()

    // Sonatype OSSRH
    maven {
        url = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
    }

    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

configurations {
    xmlDoclet
}

dependencies {
    implementation('com.github.jsqlparser:jsqlparser:+'){ changing = true }
    implementation 'com.diogonunes:JColor:+'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.12.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.+'

    // Java Doc in XML Format
    xmlDoclet 'com.manticore-projects.tools:xml-doclet:+'
}

configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'com.github.jsqlparser') {
            // Check for updates every build
            resolutionStrategy.cacheChangingModulesFor 30, 'seconds'
        }
    }
}

def getVersion = { boolean considerSnapshot ->
    Integer major = 0
    Integer minor = 0
    Integer patch = null
    Integer build = null
    String commit = null
    String snapshot = ""

    def versionStr = providers.exec {
        commandLine "git", "--no-pager", "-C", project.projectDir,  "describe", "--tags", "--always", "--dirty=-SNAPSHOT"
    }.standardOutput.asText.get().trim()

    def pattern = /(?<major>\d*)\.(?<minor>\d*)(\.(?<patch>\d*))?(-(?<build>\d*)-(?<commit>[a-zA-Z\d]*))?/
    def matcher = versionStr =~ pattern

    if (matcher.find()) {
        major = matcher.group('major') as Integer ?: 0
        minor = matcher.group('minor') as Integer ?: 0
        patch = matcher.group('patch') as Integer ?: null
        build = matcher.group('build') as Integer ?: null
        commit = matcher.group('commit') ?: null
    }

    if (considerSnapshot && (versionStr.endsWith('SNAPSHOT') || build != null)) {
        minor++
        if (patch != null) patch = 0
        snapshot = "-SNAPSHOT"
    }

    return patch != null
            ? "${major}.${minor}.${patch}${snapshot}"
            : "${major}.${minor}${snapshot}"
}

// for publishing a release, call Gradle with Environment Variable RELEASE:
// RELEASE=true gradle JSQLFormatter:publish
version = getVersion( !System.getenv("RELEASE") )
group = 'com.manticore-projects.jsqlformatter'
description = 'JSQLFormatter'

java {
    withSourcesJar()
    withJavadocJar()

    sourceCompatibility = '11'
    targetCompatibility = '11'

    // needed for XML-Doclet to work (since Doclet changed again with Java 13)
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}


javadoc {
    include("build/generated/javacc/net/sf/jsqlparser/parser/*.java" )
    include("../JSQLParser/src/main/java/**/*.java")
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.addBooleanOption("Xdoclint:none", true)
}

tasks.register('xmldoc', Javadoc) {
    def outFile =  reporting.file(
            version.endsWith("-SNAPSHOT")
                    ? "xmlDoclet/javadoc_snapshot.xml"
                    : "xmlDoclet/javadoc_stable.xml"
    )

    def rstFile =  reporting.file(
            version.endsWith("-SNAPSHOT")
                    ? "xmlDoclet/javadoc_snapshot.rst"
                    : "xmlDoclet/javadoc_stable.rst"
    )

    source = sourceSets.main.allJava
    include("build/generated/javacc/net/sf/jsqlparser/parser/*.java" )
    include("../JSQLParser/src/main/java/**/*.java")

    title = "API $version"
    destinationDir = reporting.file("xmlDoclet")
    options.docletpath = configurations.xmlDoclet.files as List
    options.doclet = "com.manticore.tools.xmldoclet.XmlDoclet"
    options.addBooleanOption("rst", true)
    options.addBooleanOption("withFloatingToc", true)
    options.addStringOption("basePackage", "com.manticore.jsqlformatter")
    options.addStringOption("filename", outFile.getName())

    dependsOn(compileJava)
    doLast {
        copy {
            from reporting.file("xmlDoclet/javadoc.rst")
            into "${projectDir}/src/site/sphinx/"
        }
    }
}

test {
    useJUnitPlatform()
    jacoco {
        excludes = ['net/sf/jsqlparser/parser/CCJSqlParserTokenManager']
    }

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "1G"
}

license {
    excludes(["**/*.txt", "**/*.conf", "**/*.sql",])
    includes(["**/*.properties", "**/*.java", "**/*.xml"])

    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Andreas Reichel'
    ext.email = 'andreas@manticore-projects.com'

    strictCheck = false
    ignoreFailures = true
}

coveralls {
    // /home/runner/work/jsqlformatter/jsqlformatter/build/reports/jacoco/test/jacocoTestReport.xml
    jacocoReportPath  layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
    // Jacoco can't handle the TokenManager class
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**CCJSqlParserTokenManager**"
            ])
        }))
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            //element = 'CLASS'
            limit {
                minimum = 0.69
            }
            excludes = [
            ]
        }
        rule {
            //element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'

                maximum = 800
            }
            excludes = [
            ]
        }
    }
}

spotbugsMain {
    reports {
        html {
            destination = file("build/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugs {
    // fail only on P1 and without the net.sf.jsqlparser.parser.*
    excludeFilter = file("config/spotbugs/spotBugsExcludeFilter.xml")

    // do not run over the test, although we should do that eventually
    spotbugsTest.enabled = false
}

pmd {
    consoleOutput = true
    sourceSets = [sourceSets.main]

    // clear the ruleset in order to use configured rules only
    ruleSets = []

    //rulesMinimumPriority = 1
    ruleSetFiles = files("config/pmd/ruleset.xml")

    pmdMain {
        excludes = [
                "build/generated/*"
        ]
    }
}

checkstyle {
    sourceSets = [sourceSets.main, sourceSets.test]
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    ratchetFrom 'origin/main'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.rst', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        leadingTabsToSpaces(4) // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        leadingTabsToSpaces(4) // or spaces. Takes an integer argument if you don't like 4
        eclipse().configFile('config/formatter/eclipse-java-google-style.xml')
    }
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'jsqlformatter'
            from(components.java)
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'JSQLFormatter library'
                description = 'Format and pretty print SQL Statements'
                url = 'https://manticore-projects.com/JSQLFormatter/index.html'
                licenses {
                    license {
                        name = 'GNU Affero General Public License Version 3'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'are'
                        name = 'Andreas Reichel'
                        email = 'andreas@manticore-projects.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/manticore-projects/jsqlformatter.git'
                    developerConnection = 'scm:git:ssh://git@github.com:manticore-projects/jsqlformatter.git'
                    url = 'http://manticore-projects.com/JSQLFormatter/index.html'
                }
            }
        }
    }
    repositories {
        maven {
            // Username and Password are defined in ~/.gradle/gradle.properties
            name "ossrh"
            url version.toString().endsWith('-SNAPSHOT')
                    ? "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials(PasswordCredentials)
        }
    }
}

signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 11
}

tasks.withType(Test).configureEach {
    maxParallelForks = 100
    forkEvery = 1
}

tasks.register('gitChangelogTask', GitChangelogTask) {
    fromRepo.set( file("$projectDir").toString() )
    file.set( new File("${projectDir}/src/site/sphinx/changelog.rst") )
    //fromRevision.set( "4.0")
    //toRef = "1.1";

    // switch off the formatter since the indentation matters for Mark-down
    // @formatter:off
    templateContent.set ("""
************************
Changelog
************************


{{#tags}}
{{#ifMatches name "^Unreleased.*"}}
Latest Changes since |JSQLPARSER_VERSION|
{{/ifMatches}}
{{#ifMatches name "^(?!Unreleased).*"}}
Version {{name}}
{{/ifMatches}}
=============================================================

 {{#issues}}

  {{#commits}}
   {{#ifMatches messageTitle "^(?!Merge).*"}}
  * **{{{messageTitle}}}**
    
    {{authorName}}, {{commitDate}}
   {{/ifMatches}}
  {{/commits}}

 {{/issues}}
{{/tags}}
""")
    // @formatter:on
}

remotes {
    webServer {
        host = findProperty("${project.name}.host")
        user = findProperty("${project.name}.username")
        identity = new File("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

ssh.settings {
    timeoutSec = 60000
}

tasks.register('upload') {
    dependsOn(jar, gitChangelogTask, xmldoc, xslt)
    doFirst {
        if (findProperty("${project.name}.host") == null) {
            println(
                    """
                Property \"${project.name}.host\' not found.
                Please define \"${project.name}.host\" in the Gradle configuration (e. g. \$HOME/.gradle/gradle.properties.
                """
            )
        }
    }
    doLast {
        ssh.run {
            session(remotes.webServer) {
                def versionStable = getVersion(false)
                execute "mkdir -p download/${project.name}-${versionStable}"
                for (File file: fileTree(include:['*.jar'], dir:"${project.buildDir}/libs").collect()) {
                    put from: file, into: "download/${project.name}-${versionStable}"
                }
            }
        }
    }
}

tasks.register('renderRR') {
    doLast {
        def rrDir = layout.buildDirectory.dir("rr").get().asFile

        // Download convert.war
        download.run {
            src 'http://manticore-projects.com/download/convert.war'
            dest new File(rrDir, "convert.war")
            overwrite false
            onlyIfModified true
        }

        // Download rr.war
        download.run {
            src 'http://manticore-projects.com/download/rr.war'
            dest new File(rrDir, "rr.war")
            overwrite false
            onlyIfModified true
            tempAndMove true
        }

        // Convert JJ file to EBNF
        tasks.register("convertJJ", JavaExec) {
            standardOutput = new FileOutputStream(new File(rrDir, "JSqlParserCC.ebnf"))
            mainClass = "-jar"
            args = [
                    new File(rrDir, "convert.war").absolutePath,
                    project(":JSQLParser").layout.buildDirectory.file("generated/jjtree/net/sf/jsqlparser/parser/JSqlParserCC.jj").get().getAsFile().absolutePath
            ]
        }.get().exec()

        // Generate RR diagrams
        tasks.register("generateRR", JavaExec) {
            mainClass = "-jar"
            args = [
                    new File(rrDir, "rr.war").absolutePath,
                    "-noepsilon",
                    "-color:#4D88FF",
                    "-offset:0",
                    "-width:800",
                    "-out:${new File(rrDir, "JSqlParserCC.xhtml")}",
                    new File(rrDir, "JSqlParserCC.ebnf").absolutePath
            ]
        }.get().exec()
    }
}


task xslt(type: SaxonXsltTask) {
    def outFile = version.endsWith("-SNAPSHOT")
            ?   file("src/site/sphinx/syntax_snapshot.rst")
            :   file("src/site/sphinx/syntax_stable.rst")

    dependsOn(renderRR)
    stylesheet file('src/main/resources/rr/xhtml2rst.xsl')

    parameters (
            "withFloatingToc": System.getenv().getOrDefault("FLOATING_TOC", "true"),
            "isSnapshot": Boolean.toString(version.endsWith("-SNAPSHOT"))
    )

    // Transform every .xml file in the "input" directory.
    input layout.buildDirectory.file("rr/JSqlParserCC.xhtml").get()
    output outFile
}


