import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

plugins {
    id 'java'
    id 'maven-publish'
    //id 'com.github.sherter.google-java-format' version '0.9'

    // download the RR tools which have no Maven Repository
    id "de.undercouch.download" version "latest.release"

    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "latest.release"

    id "kr.motd.sphinx" version "latest.release"

    // Web Assembly Compiler
    id "de.inetsoftware.jwebassembly" version "latest.release"
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenCentral()

    maven { url = uri('https://jitpack.io') }
}

dependencies {
    //implementation project(':JSQLParser')
    implementation 'com.github.jsqlparser:jsqlparser:4.5-SNAPSHOT'

    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'com.diogonunes:JColor:5.4.1'

    // https://mvnrepository.com/artifact/org.graalvm.sdk/graal-sdk
    implementation 'org.graalvm.sdk:graal-sdk:22.0.0.2'

    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.github.julianthome:inmemantlr-api:1.9.2'
    testImplementation 'junit:junit:4.13.2'

    // for the RR Tools
    implementation 'org.jsoup:jsoup:1.14.3'
    implementation 'net.sf.saxon:Saxon-HE:11.3'

    // Web Assembly Compiler
    //implementation 'com.github.i-net-software:JWebAssembly:v0.4'
    implementation 'com.github.i-net-software:JWebAssembly:master-SNAPSHOT'
    implementation 'com.github.i-net-software:jwebassembly-api:master-SNAPSHOT'
}

group = 'com.manticore-projects.jsqlformatter'
version = '0.1.12'
description = 'JSQLFormatter'
java.sourceCompatibility = JavaVersion.VERSION_1_8

java {
    withSourcesJar()
    withJavadocJar()
}

wasm {
    //Get more debug information if there are problems.
    //logging.level = LogLevel.DEBUG
    //logging.levelInternal = LogLevel.DEBUG

    //Change the output format to the text format *.wat.
    //This can be helpful to understand the problems if you see the generated code as text format.
    //format = 'text'

    //The used JWebAssembly compiler version. The default is the latest release '+'.
    //You can set any valid Gradle version string or a full dependency string.
    //The snapshot version is recommended until a stable release.
    //compilerVersion = 0.2
    compilerVersion = 'com.github.i-net-software:jwebassembly:master-SNAPSHOT'

    //Write method and parameter names into the output *.wasm file.
    //The file will be approximate 10% larger. And it generate a source map.
    //With a source map you can see in the debugger of the browser your source code if available.
    debugNames = true

    //Set an absolute or relative path between the final wasm file location and the source files location.
    ///This is needed for debugging in the browser. It work only if debugNames = true.
    //sourceMapBase = '../../src/main/java/'
    //sourceMapBase = '/src/main/java/'

    //set the destination dir
    //destinationDir = file( 'targetDir' )
}

publishing {
    publications {
         mavenJava(MavenPublication) {
            artifactId 'jsqlformatter'
            from(components.java)
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('testFixturesRuntimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
       
        maven {
            // Username and Password are defined in ~/.gradle/gradle.properties
            name "ossrh"
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials(PasswordCredentials)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test)  {
    maxParallelForks = 100
    forkEvery = 1
}


task renderRR {
    dependsOn(sphinx)

    doLast {
        // these WAR files have been provided as a courtesy by Gunther Rademacher
        // and belong to the RR - Railroad Diagram Generator Project
        // https://github.com/GuntherRademacher/rr
        //
        // Hosting at manticore-projects.com is temporary until a better solution is found
        // Please do not use these files without Gunther's permission
        download.run {
            src 'http://manticore-projects.com/download/convert.war'
            dest "${project(':JSQLFormatter').buildDir}/rr/convert.war"
            overwrite false
        }

        download.run {
            src 'http://manticore-projects.com/download/rr.war'
            dest "${project(':JSQLFormatter').buildDir}/rr/rr.war"
            overwrite false
        }

        javaexec {
            standardOutput = new FileOutputStream("${project(':JSQLFormatter').buildDir}/rr/JSqlParserCC.ebnf")
            main="-jar"
            args = [
                    "${project(':JSQLFormatter').buildDir}/rr/convert.war",
                    "${project(':JSQLParser').buildDir}/generated/jjtree/net/sf/jsqlparser/parser/JSqlParserCC.jj"
            ]
        }

        javaexec {
            main="-jar"
            args = [
                    "${project(':JSQLFormatter').buildDir}/rr/rr.war",
                    "-noepsilon",
                    "-color:#4D88FF",
                    "-offset:0",
                    "-width:800",
                    //"-png",
                    //"-out:${buildDir}/rr/JSqlParserCC.zip",
                    "-out:${project(':JSQLFormatter').buildDir}/sphinx/_static/JSqlParserCC.xhtml",
                    "${project(':JSQLFormatter').buildDir}/rr/JSqlParserCC.ebnf"
            ]
        }

        javaexec {
            //main="-jar";
            group = "Execution"
            description = "Run the main class with JavaExecTask"
            classpath = sourceSets.main.runtimeClasspath
            mainClass = 'com.manticore.jsqlformatter.RRTools'
            args = [
                    "${project(':JSQLFormatter').buildDir}/sphinx/_static/JSqlParserCC.xhtml"
            ]
        }
    }
}

task gitChangelogTask(type: GitChangelogTask) {
    fromRepo = file("$projectDir")
    file = new File("CHANGELOG.md")
    templateContent = """
 Changelog of JSQLParser.

{{#tags}}
## {{name}}
 {{#issues}}
  {{#hasIssue}}
   {{#hasLink}}
### {{name}} [{{issue}}]({{link}}) {{title}} {{#hasIssueType}} *{{issueType}}* {{/hasIssueType}} {{#hasLabels}} {{#labels}} *{{.}}* {{/labels}} {{/hasLabels}}
   {{/hasLink}}
   {{^hasLink}}
### {{name}} {{issue}} {{title}} {{#hasIssueType}} *{{issueType}}* {{/hasIssueType}} {{#hasLabels}} {{#labels}} *{{.}}* {{/labels}} {{/hasLabels}}
   {{/hasLink}}
  {{/hasIssue}}
  {{^hasIssue}}
### {{name}}
  {{/hasIssue}}

  {{#commits}}
**{{{messageTitle}}}**

{{#messageBodyItems}}
 * {{.}}
{{/messageBodyItems}}

[{{hash}}](https://github.com/{{ownerName}}/{{repoName}}/commit/{{hash}}) {{authorName}} *{{commitTime}}*

  {{/commits}}

 {{/issues}}
{{/tags}}
 """
}

sphinx {
    binaryUrl = "file:///usr/bin/sphinx-build"
    sourceDirectory = "${projectDir}/src/site/sphinx"
    outputDirectory = "${project.buildDir}/sphinx"
    // Add environment variables.
    environments = [
            'artifactId': 'com.manticore-projects.jsqlformatter'
            , 'projectName': 'JSQLFormatter'
            , 'versionName': version
            , 'developerName': 'Andreas Reichel'
            , 'email_support': 'andreas@manticore-projects.com'
    ]
    // env 'ENV_BAZ', 'value3'
    // tags 'tagA', 'tagB'
}


